name: Build MacOS

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-macos.yml'
      - 'src/**'
      - 'include/**'
      - 'example/**'
      - 'CMakeLists.txt'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: Install Homebrew
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - name: Update CMake
        run: brew install cmake

      - name: Determine CPU Cores
        id: cpu-info
        run: echo "CPU_CORES=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV

      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release -- -j${{ env.CPU_CORES }}

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLE_PASSWORD }}

      - name: Install the provisioning profile
        run: |
          mkdir -p ~/Library/Developer/Xcode/Provisioning\ Profiles
          echo "${{ secrets.APPLE_PROVISION_PROFILE }}" | base64 --decode > ~/Library/Developer/Xcode/Provisioning\ Profiles/Github_Actions.provisionprofile

      - name: Code Sign ${{ matrix.os == 'macos-13' && 'x86_64' || 'arm64' }} Libraries
        run: |
          codesign --sign "${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}" --options runtime --timestamp lib/libbabylon.dylib

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os == 'macos-13' && 'macos-x86_64' || 'macos-arm64' }}
          path: |
            lib/
            include/

  create-universal-dylibs:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download x86_64 Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-x86_64
          path: macos-x86_64

      - name: Download arm64 Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-arm64
          path: macos-arm64

      - name: Create Universal dylibs
        run: |
          mkdir -p universal/lib
          for dylib in macos-x86_64/lib/*.dylib; do
            dylib_name=$(basename $dylib)
            lipo -create macos-x86_64/lib/$dylib_name macos-arm64/lib/$dylib_name -output universal/lib/$dylib_name
          done

      - name: Add Include Directory
        run: cp -r macos-x86_64/include universal/include

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLE_PASSWORD }}

      - name: Install the provisioning profile
        run: |
          mkdir -p ~/Library/Developer/Xcode/Provisioning\ Profiles
          echo "${{ secrets.APPLE_PROVISION_PROFILE }}" | base64 --decode > ~/Library/Developer/Xcode/Provisioning\ Profiles/Github_Actions.provisionprofile

      - name: Submit for Notarization
        run: |
          xcrun notarytool store-credentials --apple-id ${{ secrets.APPLE_ID }} --password ${{ secrets.APPLE_APPLICATION_SPECIFIC_PASSWORD }} --team-id ${{ secrets.APPLE_TEAM_ID }} --validate notorization_profile
          xcrun notarytool submit --keychain-profile "notorization_profile" --progress --wait universal/lib/libbabylon.dylib

      - name: Staple Notarization
        run: |
          xcrun stapler staple universal/lib/libbabylon.dylib

      - name: Upload Universal dylibs
        uses: actions/upload-artifact@v3
        with:
          name: macos-universal
          path: universal/
